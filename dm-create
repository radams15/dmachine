#!/usr/bin/perl

use warnings;
use strict;

use Getopt::Long;

require '/Users/rhys/scripts/dmachine/private/share.pl';

my $exe = $0;

our $CM;
our $user;


my $containerName;
my $imageName;
my $homeDir = "/Users/$user";
my $dryRun = 0;
my $hostname = `hostname`;

sub usage {
    return "Usage: $exe create -n NAME -i IMAGE\n";
}

GetOptions(
           'name|n=s' => \$containerName,
           'image|i=s' => \$imageName,
           'home|b=s' => \$homeDir,
           'hostname|d=s' => \$hostname,
           'help|h' => sub {print usage(); exit;}
           ) or die 'Error in CLI args\n';

die usage() unless defined($containerName) and defined($imageName);

chomp $hostname;

sub checkedSystem {
    print @_, "\n";
    
    if(! $dryRun){
        return system(@_);
    }
}

sub getInstallCmds {
	my ($image, $user) = @_;

	if ($image =~ /rocky.*/ || $image =~ /fedora.*/){
        return "dnf upgrade -y ; dnf install -y sudo systemd ; useradd $user";
	} elsif ($image =~ /alpine.*/){
        return "apk update ; apk upgrade ; apk add sudo ; adduser -H -D $user";
    }

    return "apt-get update ; apt-get upgrade -y ; apt-get install -y sudo systemd ; useradd $user";
}

sub init {
	my ($name, $image) = @_;

	my $cmd = "$CM start $name";
	
    checkedSystem $cmd;

	my $installCmd = getInstallCmds($image, $user);

	$cmd = "$CM exec $name sh -c '$installCmd ; echo \"$user ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers'";
	
    checkedSystem $cmd;
}

sub create {
	my ($name, $image, $home) = @_;

	my $cmd = "$CM create --net host --hostname $hostname --name $name -v $home:/home/$user -v /var/run/docker.sock:/var/run/docker.sock -it $image";

    checkedSystem $cmd;
}

create $containerName, $imageName, $homeDir;
init $containerName, $imageName;
